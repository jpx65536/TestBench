"""
Django settings for TestBench project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
import logging
from pathlib import Path
from datetime import datetime
from utils.custom_log_handler import CustomRotatingFileHandler
from django.utils.log import CallbackFilter

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-4dyvfmugjg^cit6^7dil85vi_c*_c7pi&*_kx4*$l0@g*&l!fa'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'testplatform.apps.TestplatformConfig',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'TestBench.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'TestBench.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'testbench',
        'HOST': '192.168.182.129',
        'PORT': 3306,
        'USER': 'root',
        'PASSWORD': 'Xiao@1234'
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOG_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

def exclude_errors_callback(record):
    return record.levelno < logging.ERROR

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'exclude_errors': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': exclude_errors_callback,
        },
    },
    'formatters': {
        'verbose': {
            'format': '%(asctime)s | %(levelname)s | %(module)s | %(message)s',
        }
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'utils.custom_log_handler.CustomRotatingFileHandler',
            'base_name': 'project',  # 基础日志文件名
            'log_dir': LOG_DIR,  # 日志目录
            'maxBytes': 300 * 1024 * 1024,  # 最大 300MB
            'backupCount': 30,  # 保留最近 30 天的日志
            'formatter': 'verbose',
            'encoding': 'utf-8',
            'filters': ['exclude_errors'],
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'utils.custom_log_handler.CustomRotatingFileHandler',
            'base_name': 'error',  # 基础日志文件名
            'log_dir': LOG_DIR,  # 日志目录
            'maxBytes': 300 * 1024 * 1024,  # 最大 300MB
            'backupCount': 30,
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },
        'console': {
            'level': 'CRITICAL',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['error_file', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        # 'django.request': {
        #     'handlers': ['error_file'],
        #     'level': 'ERROR',
        #     'propagate': False,
        # },
        # 'custom': {
        #     'handlers': ['file', 'console'],
        #     'level': 'INFO',
        # },
    },
}